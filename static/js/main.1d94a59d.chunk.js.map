{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortBy","goodsFromServer","App","useState","Default","sortField","setSortField","isReversed","setIsReversed","visibleGoods","goods","prepearedGoods","Name","sort","goods1","goods2","localeCompare","Length","length","reverse","getPreparedGoods","isResetButtonVisible","className","type","cn","onClick","prevReverseState","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,YAAAA,E,gBAAAA,E,YAAAA,M,KAyCE,IAAME,EAAgB,WAC3B,MAAkCC,mBAASH,EAAOI,SAAlD,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAoCH,oBAAS,GAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KAMMC,EA3CR,SACEC,EACAL,EACAE,GAEA,IAAMI,EAAc,YAAOD,GAE3B,GAAIL,EACF,OAAQA,GACN,KAAKL,EAAOY,KACVD,EAAeE,MAAK,SAACC,EAAQC,GAAT,OAClBD,EAAOE,cAAcD,MAGvB,MAEF,KAAKf,EAAOiB,OACVN,EAAeE,MAAK,SAACC,EAAQC,GAAT,OAClBD,EAAOI,OAASH,EAAOG,UAGzB,MAEF,QACE,OAAOP,EAQb,OAJIJ,GACFI,EAAeQ,UAGVR,EAWcS,CACnBnB,EACAI,EACAE,GAGIc,EAAuBhB,GAAaE,EAO1C,OACE,sBAAKe,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,SACA,UACA,CAAE,WAAYnB,IAAcL,EAAOY,OAErCa,QAAS,kBAAMnB,EAAaN,EAAOY,OAPrC,iCAYA,wBACEW,KAAK,SACLD,UAAWE,IACT,SACA,aACA,CAAE,WAAYnB,IAAcL,EAAOiB,SAErCQ,QAAS,kBAAMnB,EAAaN,EAAOiB,SAPrC,4BAYA,wBACEM,KAAK,SACLD,UAAWE,IACT,SACA,aACA,CAAE,YAA2B,IAAfjB,IAEhBkB,QAnDoB,kBAC1BjB,GAAc,SAACkB,GAAD,OAAuBA,MA2CjC,qBAWCL,GACC,wBACEE,KAAK,SACLD,UAAU,4BACVG,QAAS,kBA9CjBnB,EAAaN,EAAOI,cACpBI,GAAc,IA0CR,sBAWJ,6BACGC,EAAakB,KAAI,SAAAC,GAAI,OACpB,oBAAI,UAAQ,OAAZ,SACGA,GADqBA,YCjIlCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.1d94a59d.chunk.js","sourcesContent":["import 'bulma/css/bulma.css';\nimport './App.scss';\nimport cn from 'classnames';\nimport { useState } from 'react';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortBy {\n  Name = 'name',\n  Length = 'length',\n  Default = '',\n}\n\nfunction getPreparedGoods(\n  goods: string[],\n  sortField: SortBy,\n  isReversed: boolean,\n) {\n  const prepearedGoods = [...goods];\n\n  if (sortField) {\n    switch (sortField) {\n      case SortBy.Name: (\n        prepearedGoods.sort((goods1, goods2) => (\n          goods1.localeCompare(goods2)\n        ))\n      );\n        break;\n\n      case SortBy.Length: (\n        prepearedGoods.sort((goods1, goods2) => (\n          goods1.length - goods2.length\n        ))\n      );\n        break;\n\n      default:\n        return prepearedGoods;\n    }\n  }\n\n  if (isReversed) {\n    prepearedGoods.reverse();\n  }\n\n  return prepearedGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortField, setSortField] = useState(SortBy.Default);\n  const [isReversed, setIsReversed] = useState(false);\n\n  const handleToggleReverse = () => (\n    setIsReversed((prevReverseState) => !prevReverseState)\n  );\n\n  const visibleGoods = getPreparedGoods(\n    goodsFromServer,\n    sortField,\n    isReversed,\n  );\n\n  const isResetButtonVisible = sortField || isReversed;\n\n  const handleResetClick = () => {\n    setSortField(SortBy.Default);\n    setIsReversed(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn(\n            'button',\n            'is-info',\n            { 'is-light': sortField !== SortBy.Name },\n          )}\n          onClick={() => setSortField(SortBy.Name)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn(\n            'button',\n            'is-success',\n            { 'is-light': sortField !== SortBy.Length },\n          )}\n          onClick={() => setSortField(SortBy.Length)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn(\n            'button',\n            'is-warning',\n            { 'is-light': isReversed === false },\n          )}\n          onClick={handleToggleReverse}\n        >\n          Reverse\n        </button>\n        {isResetButtonVisible && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={() => handleResetClick()}\n          >\n            Reset\n          </button>\n        )}\n\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li data-cy=\"Good\" key={good}>\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}